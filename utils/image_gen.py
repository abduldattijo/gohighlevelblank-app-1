"""
Compatible image_gen.py module with required functions
"""

from openai import OpenAI
from config import OPENAI_API_KEY, BRAND_COLORS
import requests
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont, ImageColor
import random
import os

# Initialize the OpenAI client
client = OpenAI(api_key=OPENAI_API_KEY)

# Define brand styling constants 
# (These should match your config.py values - adjust as needed)
COLOR_PRIMARY = "#4267B2" if 'BRAND_COLORS' not in globals() else BRAND_COLORS[0]
COLOR_SECONDARY = "#00b2ff" if 'BRAND_COLORS' not in globals() else BRAND_COLORS[1]
COLOR_BACKGROUND = "#FFFFFF" if 'BRAND_COLORS' not in globals() else BRAND_COLORS[2]
COLOR_TEXT = "#333333"

def generate_realistic_prompt(topic, content_type="educational"):
    """Generate a realistic, professional medical image prompt for DALL-E 3"""
    
    # Define realistic medical scenarios based on content type
    scenarios = {
        "educational": [
            "Doctor discussing thyroid lab results with patient in naturally lit office",
            "Healthcare provider explaining thyroid anatomy model to attentive patient",
            "Doctor showing thyroid diagram to middle-aged patient in medical office"
        ],
        "inspirational": [
            "Person preparing healthy meal with thyroid-supporting foods in bright kitchen",
            "Individual doing gentle yoga for thyroid health in morning light",
            "Person taking daily medication with water at kitchen table"
        ],
        "funny": [
            "Doctor holding abnormally large clipboard with puzzled expression",
            "Person dramatically measuring neck with exaggerated concern",
            "Doctor and patient looking surprised at medical chart"
        ],
        "mixed": [
            "Healthcare provider reviewing thyroid ultrasound with patient",
            "Doctor checking patient's neck for thyroid issues with gentle examination",
            "Nutritionist showing thyroid-healthy meal plan to patient"
        ]
    }
    
    # Select appropriate scenario
    if content_type.lower() not in scenarios:
        content_type = "educational"  # Default fallback
    
    scenario = random.choice(scenarios[content_type.lower()])
    
    # Build comprehensive prompt with professional photography direction
    prompt = f"""
    Create a professional, photorealistic medical image of: {scenario}
    
    Important details:
    - Use real-looking people with natural expressions and poses
    - Show authentic medical/healthcare environment with realistic details
    - Subtle lighting that creates natural shadows and dimension
    - Relates to topic: "{topic}"
    - Realistic skin textures and facial features
    - Professional medical photography style
    - Natural color palette with subtle medical blues/greens
    
    The image should look like it was taken by a healthcare photographer,
    not generated by AI. Should have the quality seen in medical journals
    or premium healthcare marketing materials.
    """
    
    return prompt.strip()

def generate_image(prompt, content_type="educational"):
    """Generate an image using DALL-E 3"""
    try:
        # Create a realistic medical prompt if not provided
        if len(prompt) < 50:
            prompt = generate_realistic_prompt(prompt, content_type)
            
        print(f"Generating image with prompt: {prompt[:100]}...")
        
        # Call DALL-E with the enhanced prompt
        response = client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            size="1024x1024",
            quality="standard",
            style="natural",  # Use natural style for realism
            n=1
        )
        
        # Extract the image URL from the response
        image_url = response.data[0].url
        return image_url
    except Exception as e:
        print(f"Error generating image: {e}")
        # Fallback to placeholder if API call fails
        safe_prompt = prompt.replace(" ", "+")[:50]
        return f"https://via.placeholder.com/1024x1024.png?text={safe_prompt}"

def save_image_from_url(url, path):
    """Save an image from a URL to a local file"""
    try:
        response = requests.get(url)
        image = Image.open(BytesIO(response.content))
        image.save(path)
        return True
    except Exception as e:
        print(f"Error saving image: {e}")
        return False

def create_graphic_with_text(topic, content_type="educational"):
    """Create a text-based graphic with the topic and brand styling"""
    try:
        # Create a blank image with brand background
        width, height = 1024, 1024
        img = Image.new('RGB', (width, height), COLOR_BACKGROUND)
        draw = ImageDraw.Draw(img)
        
        # Get colors for content type
        primary_color = COLOR_PRIMARY
        secondary_color = COLOR_SECONDARY
        
        # Add brand accent elements
        # Top accent bar
        draw.rectangle([(0, 0), (width, 60)], fill=primary_color)
        
        # Bottom accent bar
        draw.rectangle([(0, height-60), (width, height)], fill=primary_color)
        
        # Add decorative elements based on content type
        if content_type.lower() == "educational":
            # Add circular elements
            for i in range(5):
                size = random.randint(20, 80)
                x = random.randint(size, width-size)
                y = random.randint(120, height-180)
                draw.ellipse([(x-size/2, y-size/2), (x+size/2, y+size/2)], 
                           fill=secondary_color if i % 2 == 0 else primary_color, 
                           outline=None)
                
        elif content_type.lower() == "inspirational":
            # Add gentle gradient overlay
            for y in range(height):
                # Create a gradient from top to bottom
                r = int(ImageColor.getrgb(primary_color)[0] * (1 - y/height) + 
                        ImageColor.getrgb(secondary_color)[0] * (y/height))
                g = int(ImageColor.getrgb(primary_color)[1] * (1 - y/height) + 
                        ImageColor.getrgb(secondary_color)[1] * (y/height))
                b = int(ImageColor.getrgb(primary_color)[2] * (1 - y/height) + 
                        ImageColor.getrgb(secondary_color)[2] * (y/height))
                draw.line([(0, y), (width, y)], fill=(r, g, b, 50))
                
        elif content_type.lower() == "funny":
            # Add playful diagonal stripes
            stripe_width = 40
            for i in range(-height*2, width*2, stripe_width*3):
                draw.line([(i, 0), (i+height, height)], fill=secondary_color, width=stripe_width)
        
        # Try to load a font or use default
        try:
            title_font = ImageFont.truetype("Arial Bold.ttf", 60)
            subtitle_font = ImageFont.truetype("Arial.ttf", 32)
        except IOError:
            title_font = ImageFont.load_default()
            subtitle_font = ImageFont.load_default()
            
        # Break topic into lines if needed
        words = topic.split()
        lines = []
        current_line = []
        
        for word in words:
            test_line = ' '.join(current_line + [word])
            # Check if text size estimation is available
            if hasattr(draw, 'textlength'):
                text_width = draw.textlength(test_line, font=title_font)
                if text_width < width - 100 or not current_line:
                    current_line.append(word)
                else:
                    lines.append(' '.join(current_line))
                    current_line = [word]
            else:
                # If textlength not available, use simpler approach
                if len(test_line) < 25 or not current_line:
                    current_line.append(word)
                else:
                    lines.append(' '.join(current_line))
                    current_line = [word]
        
        if current_line:
            lines.append(' '.join(current_line))
            
        # Position and draw text
        y_position = height // 2 - (len(lines) * 70) // 2
        
        for line in lines:
            # Draw text with slight shadow for readability
            if hasattr(draw, 'textlength'):
                text_width = draw.textlength(line, font=title_font)
                x_position = (width - text_width) // 2
            else:
                # Estimate position if textlength not available
                x_position = width // 10
                
            # Shadow
            draw.text((x_position+2, y_position+2), line, fill="#33333333", font=title_font)
            # Main text
            draw.text((x_position, y_position), line, fill=COLOR_TEXT, font=title_font)
            
            y_position += 70
        
        # Add subtitle about thyroid health
        subtitle = "Beyond the lab results"
        if hasattr(draw, 'textlength'):
            sub_width = draw.textlength(subtitle, font=subtitle_font)
            sub_x = (width - sub_width) // 2
        else:
            sub_x = width // 3
            
        draw.text((sub_x, y_position + 30), subtitle, fill=primary_color, font=subtitle_font)
        
        # Add logo element at bottom
        logo_size = 60
        padding = 30
        draw.ellipse(
            [(width - logo_size - padding, height - logo_size - padding), 
             (width - padding, height - padding)], 
            fill=primary_color
        )
        
        # Add small "dr" text in the circle
        if hasattr(draw, 'textlength'):
            logo_text_x = width - logo_size//2 - padding - draw.textlength("dr", font=subtitle_font)//2
        else:
            logo_text_x = width - logo_size//2 - padding - 15
            
        draw.text(
            (logo_text_x, height - logo_size//2 - padding - 15),
            "dr",
            fill="#ffffff",
            font=subtitle_font
        )
        
        # Save to temporary file
        temp_path = "temp_text_graphic.png"
        img.save(temp_path)
        
        return temp_path
    except Exception as e:
        print(f"Error creating text graphic: {e}")
        # Return fallback
        safe_topic = topic.replace(" ", "+")[:50]
        return f"https://via.placeholder.com/1024x1024.png?text={safe_topic}"